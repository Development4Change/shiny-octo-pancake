<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.css" media="all">
    <link rel="stylesheet" type="text/css" href="views/css/form.css">
    <link rel="stylesheet prefetch" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="js/script.js"></script>
    <nav class="navbar navbar-expand-lg sticky-top bg-primary" data-bs-theme="dark">
      <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div id="navbarNav" class="collapse navbar-collapse">
          <ul class="navbar-nav">
            <li class="nav-item">
              <a class="nav-link" href="/">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/login">Login</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/signup">Signup</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/opportunity/PostedOpportunities">Opportunities</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/opportunity">Post Opportunity</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/survey">Leave A Review</a>
            </li>
            <li class="nav-item">
              <a class="nav-link active" href="/completedForms" aria-current="page">Completed Reviews</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/allReports">All Reviews</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>
    <title>Completed Reviews</title>
  </head>
  <body>
    <h3 class="text-center">Completed Reviews</h3>
    <div class="mb-3 text-center">
      <label class="inputTxt">Search for specific responses:</label>
      <input id="myInput" type="search" placeholder="Search.." onkeyup="searchTable()" title="Type in something">
    </div>
    <div class="mb-3 text-center">
      <main id="main"></main>
      <div class="ui container">
        <table id="myTable" class="table table-striped table-bordered table-responsive table-sortable table-hover">
          <thead>
            <tr id="tableHeader" class="table-dark">
              <th class="sortable" onclick="sortTable(0)">Date Created</th>
              <th class="sortable" onclick="sortTable(1)">Service Provider Used</th>
              <th class="sortable" onclick="sortTable(2)">First Visit</th>
              <th class="sortable" onclick="sortTable(3)">Services Requested</th>
              <th class="sortable" onclick="sortNums(4)">Knowledge Rank</th>
              <th class="sortable" onclick="sortMulChoiceAns(5)">Timely</th>
              <th class="sortable" onclick="sortNums(6)">Quality Rank</th>
              <th class="sortable" onclick="sortMulChoiceAns(7)">Met Needs</th>
              <th class="sortable" onclick="sortTable(8)">Comments</th>
          </tr>
          </thead>
          
          </div>
          </div>
          <tbody class="table-group-divider">
            <%surveys.forEach(survey => {%>
              <tr>
                <td><%= survey.createdDate %></td>
                <td><%= survey.serviceProvider %></td>
                <td><%= survey.firstVisit %></td>
                <td><%= survey.servicesRequested %></td>
                <td><%= survey.rankKnowledge %></td>
                <td><%= survey.timely %></td>
                <td><%= survey.rankQuality %></td>
                <td><%= survey.metNeeds %></td>
                <td><%= survey.comments %></td>
              </tr>
            <%})%>
          </tbody>
        </table>
          </body>
    <script>
        var $sortable = $(".sortable");

$sortable.on("click", function () {
var $this = $(this);
var asc = $this.hasClass("asc");
var desc = $this.hasClass("desc");
$sortable.removeClass("asc").removeClass("desc");
if (desc || (!asc && !desc)) {
    $this.addClass("asc");
} else {
    $this.addClass("desc");
}
});

function searchTable() {
var input, filter, found, table, tr, td, i, j;
input = document.getElementById("myInput");
filter = input.value.toUpperCase();
table = document.getElementById("myTable");
tr = table.getElementsByTagName("tr");
for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td");
    for (j = 0; j < td.length; j++) {
        if (td[j].innerHTML.toUpperCase().indexOf(filter) > -1) {
            found = true;
        }
    }
    if (found) {
        tr[i].style.display = "";
        found = false;
    } else if (!tr[i].id.match('^tableHeader')){
        tr[i].style.display = "none";
    }
}
}


for (i = 0; i < tr.length; i++) {
td = tr[i].getElementsByTagName("td")[0];
if (td) {
txtValue = td.textContent || td.innerText;
if (txtValue.toUpperCase().indexOf(filter) > -1) {
    tr[i].style.display = "";
} else {
    tr[i].style.display = "none"; 
}
}
}


function sortNums(n) {
var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
table = document.getElementById("myTable");
switching = true;
dir = "asc";
while (switching) 
{
    switching = false;
    rows = table.rows;
    for (i = 1; i < (rows.length - 1); i++) 
    {
        shouldSwitch = false;
        x = rows[i].getElementsByTagName("td")[n];
        y = rows[i + 1].getElementsByTagName("td")[n];
        rowAnswer=rows[i].getElementsByTagName("td")[n].innerHTML;

        if (dir == "asc") 
        {   
            if (parseInt(x.innerHTML, 10) > parseInt(y.innerHTML, 10)) 
            {
                shouldSwitch = true;
                break;
            }
        } 
        else if (dir == "desc") 
        {
            if (parseInt(x.innerHTML, 10) < parseInt(y.innerHTML, 10)) 
            {
                shouldSwitch = true;
                break;
            }
        }
    }
    if (shouldSwitch) 
    {
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        switchcount ++;
    } 
    else 
    {
        if (switchcount == 0 && dir == "asc") 
        {
            dir = "desc";
            switching = true;
        }
    }
}
}  

function sortMulChoiceAns(n) {
var table, rows, switching, i, j, x, y, shouldSwitch, dir, switchcount = 0;
table = document.getElementById("myTable");
switching = true;
dir = "asc";
while (switching) 
{
    switching = false;
    rows = table.rows;
    for (i = 1; i < (rows.length - 1); i++) 
    {   
        shouldSwitch = false;
        x = rows[i].getElementsByTagName("td")[n];
        y = rows[i + 1].getElementsByTagName("td")[n];
        rowAnswer=rows[i].getElementsByTagName("td")[n].innerHTML.toLowerCase();
        //console.log("rowAnswer: "+rowAnswer + " i: " + i);
        if(rowAnswer == "extremely timely" || rowAnswer == "very satisfied" || rowAnswer == "excellent")
        {
            rows[i].getElementsByTagName("td")[n].setAttribute("name","1");
            
        }
        if(rowAnswer == "very timely" || rowAnswer == "somewhat satisfied" || rowAnswer == "very good")
        {
            rows[i].getElementsByTagName("td")[n].setAttribute("name","2");
            
        }
        if(rowAnswer == "somewhat timely" || rowAnswer == "neither satisfied or dissatisfied" || rowAnswer == "good")
        {
            rows[i].getElementsByTagName("td")[n].setAttribute("name","3");
            
        }
        if(rowAnswer == "not so timely" || rowAnswer == "somewhat dissatisfied" || rowAnswer == "poor")
        {
            rows[i].getElementsByTagName("td")[n].setAttribute("name","4");
            
        }
        if(rowAnswer == "not at all timely" || rowAnswer == "very dissatisfied" || rowAnswer == "very poor")
        {
            rows[i].getElementsByTagName("td")[n].setAttribute("name","5");
            
        }
        //console.log("rowAnswer: "+rowAnswer + " i: " + i);
        if (dir == "asc") 
        {   
            if (x.getAttribute("name") > y.getAttribute("name")) 
            {
                shouldSwitch = true;
                break;
            }
        } 
        else if (dir == "desc") 
        {
            if (x.getAttribute("name") < y.getAttribute("name")) 
            {
                shouldSwitch = true;
                break;
            }
        }
    }
    if (shouldSwitch) 
    {
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        switchcount ++;
    } 
    else 
    {
        if (switchcount == 0 && dir == "asc") 
        {
            dir = "desc";
            switching = true;
        }
    }
}
}    

function sortTable(n) {
var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
table = document.getElementById("myTable");
switching = true;
// Set the sorting direction to ascending:
dir = "asc";
/* Make a loop that will continue until
no switching has been done: */
while (switching) 
{
    // Start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) 
    {
        // Start by saying there should be no switching:
        shouldSwitch = false;
        /* Get the two elements you want to compare,
        one from current row and one from the next: */
        x = rows[i].getElementsByTagName("td")[n];
        y = rows[i + 1].getElementsByTagName("td")[n];
        rowAnswer=rows[i].getElementsByTagName("td")[n].innerHTML;
        //console.log("rowAnswer "+rowAnswer);
        /* Check if the two rows should switch place,
        based on the direction, asc or desc: */

        if (dir == "asc") 
        {   
            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) 
            {
                // If so, mark as a switch and break the loop:
                shouldSwitch = true;
                break;
            }
        } 
        else if (dir == "desc") 
        {
            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) 
            {
                // If so, mark as a switch and break the loop:
                shouldSwitch = true;
                break;
            }
        }
    }
    if (shouldSwitch) 
    {
        /* If a switch has been marked, make the switch
        and mark that a switch has been done: */
        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
        switching = true;
        // Each time a switch is done, increase this count by 1:
        switchcount ++;
    } 
    else 
    {
        /* If no switching has been done AND the direction is "asc",
        set the direction to "desc" and run the while loop again. */
        if (switchcount == 0 && dir == "asc") 
        {
            dir = "desc";
            switching = true;
        }
    }
}
}
    </script>
</html>